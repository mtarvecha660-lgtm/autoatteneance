Smart Campus: Attendance & Personalized Planning System
Welcome to the Smart Campus project! This is a modern, all-in-one web application designed to streamline campus life for students, teachers, administrators, and event managers. It features real-time QR code-based attendance, personalized student dashboards with AI-powered task suggestions, and a simple interface for managing campus events.

The entire system is built with front-end technologies and runs directly in the browser, using localStorage to simulate a database and persist data between sessions.

✨ Key Features
The application provides distinct dashboards and functionalities tailored to four different user roles:

👨‍🎓 For Students:
Personalized Dashboard: View your daily class schedule at a glance.

QR Code Attendance: Easily mark your attendance by scanning a QR code generated by the teacher.

Goal Setting: List your academic and personal goals.

AI-Powered Goal Breakdown: Get any large goal broken down into smaller, actionable steps.

AI Smart Tasks: During free periods, generate AI-powered suggestions for productive tasks based on your interests and goals.

Campus Event Viewer: See ongoing, upcoming, and past campus events in an organized view.

👩‍🏫 For Teachers:
Class Selection: Easily switch between different classes you teach.

Real-time Attendance Grid: See a live grid of all students in your class and their attendance status (present or absent).

QR Code Generation: Generate a unique, secure QR code for each class session that students can scan to mark their attendance.

Joran For Administrators:
Campus Overview: View high-level statistics, including the total number of students and teachers.

Live Attendance Rate: Monitor the overall attendance percentage for the current day across the entire campus.

🗓️ For Event Managers:
Event Creation: A simple form to create and publish new campus events, including details like date, time, location, and description.

Event Management: View a list of all created events, sorted by date.

🚀 Tech Stack & Libraries
This project is built using foundational web technologies and leverages modern libraries for a better user experience.

Core: HTML5, CSS3, JavaScript (ES6 Modules)

Styling: Tailwind CSS for a utility-first styling workflow.

QR Code Generation: qrcode.min.js to generate attendance codes on the teacher's dashboard.

QR Code Scanning: html5-qrcode for a robust, camera-based QR code scanning experience on the student's device.

AI Integration (Simulated): The logic includes a placeholder function to demonstrate how an integration with a generative AI API (like the Gemini API) would work for task generation and goal breakdown.

📂 Project Structure
The project has been organized into three separate files for better maintainability and separation of concerns:

/
├── 📄 index.html     # The main HTML file containing the structure of all views and modals.
├── 🎨 style.css      # Custom CSS for styling components, cards, and animations.
└── ⚙️ app.js         # Core JavaScript logic for all user roles, state management, and DOM manipulation.

▶️ How to Run
Since this is a front-end-only project, you don't need a complex setup.

Clone or Download: Get the project files onto your local machine.

Place Files Together: Ensure that index.html, style.css, and app.js are all in the same folder.

Open in Browser: Simply open the index.html file in any modern web browser (like Chrome, Firefox, or Edge).

The application will initialize and be ready to use!

🔧 How It Works
Simulated Database: All data (users, classes, events) is initialized and managed within the app.js file in a JavaScript object called localDB. This simulates a backend database.

Data Persistence: The application uses the browser's localStorage to save attendance records and events. This ensures that data is not lost when you refresh the page.

View Transitions: A simple view manager in app.js handles showing and hiding different dashboards with smooth CSS transitions, creating a single-page application (SPA) feel without a heavy framework.

💡 Future Improvements
This project serves as a strong foundation. Here are some ways it could be extended:

Real Backend: Replace the local database simulation with a proper backend service like Firebase, Supabase, or a custom Node.js/Express API for real user accounts and data storage.

Real-time Database: Use a real-time database (like Firestore) to instantly update the teacher's attendance grid when a student scans a QR code, without needing a page refresh.

Full AI Integration: Connect the placeholder functions to the actual Gemini API to provide truly dynamic and intelligent task suggestions.

User Profiles: Allow users to edit their profiles, add profile pictures, and manage their goals and interests.
